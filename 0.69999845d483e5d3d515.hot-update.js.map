{"version":3,"sources":["webpack:///./src/app.js"],"names":["app","use","static","json","urlencoded","extended","secret","initialize","session","usernameField","email","password","done","query","findOne","then","user","message","catch","console","error","e","serializeUser","id","deserializeUser","findById","setRoutes","listen","log"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,MAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;;AAEAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQ,qBAAWG,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAL,IAAIC,GAAJ,CAAQ,6BAAR;;AAEAD,IAAIC,GAAJ,CAAQ,8BAAQ,EAAEK,QAAQ,KAAV,EAAR,CAAR;;AAEAN,IAAIC,GAAJ,CAAQ,mBAASM,UAAT,EAAR;AACAP,IAAIC,GAAJ,CAAQ,mBAASO,OAAT,EAAR;;AAEA,mBAASP,GAAT,CACE,4BAAkB,EAAEQ,eAAe,OAAjB,EAAlB,EAA8C,UAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AACvE,iBAAKC,KAAL,GACGC,OADH,CACW,EAAEJ,YAAF,EADX,EAEGK,IAFH,CAEQ,gBAAQ;AACZ,QAAI,CAACC,IAAL,EAAW;AACT,aAAOJ,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEK,SAAS,kBAAX,EAAlB,CAAP;AACD;AACD,QAAID,KAAKL,QAAL,KAAkBA,QAAtB,EAAgC;AAC9B,aAAOC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEK,SAAS,qBAAX,EAAlB,CAAP;AACD;AACD,WAAOL,KAAK,IAAL,EAAWI,IAAX,CAAP;AACD,GAVH,EAWGE,KAXH,CAWS,aAAK;AACVC,YAAQC,KAAR,CAAcC,CAAd;AACA,WAAOT,KAAKS,CAAL,CAAP;AACD,GAdH;AAeD,CAhBD,CADF;;AAoBA,mBAASC,aAAT,CAAuB,UAACN,IAAD,EAAOJ,IAAP,EAAgB;AACrCA,OAAK,IAAL,EAAWI,KAAKO,EAAhB;AACD,CAFD;;AAIA,mBAASC,eAAT,CAAyB,UAACD,EAAD,EAAKX,IAAL,EAAc;AACrC,iBAAKC,KAAL,GACGY,QADH,CACYF,EADZ,EAEGR,IAFH,CAEQ,gBAAQ;AACZ,QAAI,CAACC,IAAL,EAAW;AACT,aAAOJ,KAAK,gBAAL,EAAuB,KAAvB,CAAP;AACD;AACD,WAAOA,KAAK,IAAL,EAAWI,IAAX,CAAP;AACD,GAPH,EAQGE,KARH,CAQS,aAAK;AACVC,YAAQC,KAAR,CAAc,oBAAd,EAAoCC,CAApC;AACAT,SAAKS,CAAL;AACD,GAXH;AAYD,CAbD;;AAeA,iBAAOK,SAAP,CAAiB1B,GAAjB;AACAA,IAAI2B,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMR,QAAQS,GAAR,CAAY,8BAAZ,CAAN;AAAA,CAAjB,E","file":"0.69999845d483e5d3d515.hot-update.js","sourcesContent":["import express from 'express';\nimport routes from './routes';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport session from 'express-session';\nimport cookieParser from 'cookie-parser';\nimport User from './db/models/user';\n\nconst app = express();\napp.use(express.static('dist'));\napp.use(express.static('styles'));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cookieParser());\n\napp.use(session({ secret: 'cat' }));\n\napp.use(passport.initialize());\napp.use(passport.session());\n\npassport.use(\n  new LocalStrategy({ usernameField: 'email' }, (email, password, done) => {\n    User.query()\n      .findOne({ email })\n      .then(user => {\n        if (!user) {\n          return done(null, false, { message: 'Incorrect email.' });\n        }\n        if (user.password !== password) {\n          return done(null, false, { message: 'Incorrect password.' });\n        }\n        return done(null, user);\n      })\n      .catch(e => {\n        console.error(e);\n        return done(e);\n      });\n  })\n);\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.query()\n    .findById(id)\n    .then(user => {\n      if (!user) {\n        return done('user not found', false);\n      }\n      return done(null, user);\n    })\n    .catch(e => {\n      console.error('error finding user', e);\n      done(e);\n    });\n});\n\nroutes.setRoutes(app);\napp.listen(3000, () => console.log('App listening on port 3000! '));\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js"],"sourceRoot":""}